generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Channel {
  sender_id   Int
  receiver_id Int
  channel_id  String @id @unique 
}

model Message {
  channel_id  String 
  content     String
  message_id  Int      @id @unique @default(autoincrement())
  sender_id   Int
  receiver_id Int
  sent_at     DateTime @default(now())
}

model Topic {
  name          String
  about         String
  topic_id      Int       @id @unique @default(autoincrement())
  topic_picture String
  posts         Post[]
  Category      Category? @relation(fields: [category_id], references: [category_id])
  category_id   Int?
}

model Category {
  name                String
  about               String
  color               String
  category_id         Int     @id @unique @default(autoincrement())
  topics              Topic[]
  Forum               Forum?  @relation(fields: [forumCommunity_name], references: [community_name])
  forumCommunity_name String?
}

model Forum {
  community_name String     @unique
  community_logo String
  about          String
  motd           String
  categories     Category[]
  users          User[]
}

model CustomLink {
  url            String
  custom_link_id Int    @id @unique @default(autoincrement())
  type           Int // steam = 0, store = 1, discord = 2
}

model Usergroup {
  color        String
  name         String
  usergroup_id Int    @id @unique @default(autoincrement())
  permissions  Int
}

model Vote {
  type       Int
  user_id    Int
  vote_id    Int      @id @unique @default(autoincrement())
  Comment    Comment? @relation(fields: [comment_id], references: [comment_id])
  comment_id Int?
  Post       Post?    @relation(fields: [post_id], references: [post_id])
  post_id    Int?
}

model Comment {
  user       User?    @relation(fields: [user_id], references: [public_id])
  content    String
  comment_id Int      @id @unique @default(autoincrement())
  posted_at  DateTime @default(now())
  updated_at DateTime @default(now())
  post       Post?    @relation(fields: [post_id], references: [post_id])
  post_id    Int?
  user_id    Int?
  votes      Vote[]
}

model Post {
  title            String
  body             String
  comments         Comment[]
  first_posted     DateTime  @default(now())
  last_updated     DateTime
  closed           Boolean
  pinned           Boolean
  template_allowed Boolean
  post_id          Int       @id @unique @default(autoincrement())
  User             User?     @relation(fields: [user_id], references: [public_id])
  user_id          Int?
  Topic            Topic?    @relation(fields: [topic_id], references: [topic_id])
  topic_id         Int?
  votes            Vote[]
}

model User {
  username            String
  email               String    @unique
  password            String
  time_created        DateTime  @default(now())
  last_online         DateTime
  posts               Post[]
  comments            Comment[]
  public_id           Int       @id @unique @default(autoincrement())
  token               String    @unique
  reputation          Int
  usergroups          String[]
  profile_bio         String
  profile_picture     String
  Forum               Forum?    @relation(fields: [forumCommunity_name], references: [community_name])
  forumCommunity_name String?
}
